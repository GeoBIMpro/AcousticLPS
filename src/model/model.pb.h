// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class Code;
class Beacon;
class Environement;

enum Code_Type {
  Code_Type_Gold = 0,
  Code_Type_Kasami = 1,
  Code_Type_Hadamard = 2
};
bool Code_Type_IsValid(int value);
const Code_Type Code_Type_Type_MIN = Code_Type_Gold;
const Code_Type Code_Type_Type_MAX = Code_Type_Hadamard;
const int Code_Type_Type_ARRAYSIZE = Code_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Code_Type_descriptor();
inline const ::std::string& Code_Type_Name(Code_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Code_Type_descriptor(), value);
}
inline bool Code_Type_Parse(
    const ::std::string& name, Code_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Code_Type>(
    Code_Type_descriptor(), name, value);
}
// ===================================================================

class Code : public ::google::protobuf::Message {
 public:
  Code();
  virtual ~Code();

  Code(const Code& from);

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Code& default_instance();

  void Swap(Code* other);

  // implements Message ----------------------------------------------

  Code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Code& from);
  void MergeFrom(const Code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Code_Type Type;
  static const Type Gold = Code_Type_Gold;
  static const Type Kasami = Code_Type_Kasami;
  static const Type Hadamard = Code_Type_Hadamard;
  static inline bool Type_IsValid(int value) {
    return Code_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Code_Type_Type_MIN;
  static const Type Type_MAX =
    Code_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Code_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Code_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Code_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Code_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Code.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Code_Type type() const;
  inline void set_type(::Code_Type value);

  // required uint32 order = 2;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 2;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // repeated float data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Code)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_order();
  inline void clear_has_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 order_;
  ::google::protobuf::RepeatedField< float > data_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Code* default_instance_;
};
// -------------------------------------------------------------------

class Beacon : public ::google::protobuf::Message {
 public:
  Beacon();
  virtual ~Beacon();

  Beacon(const Beacon& from);

  inline Beacon& operator=(const Beacon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Beacon& default_instance();

  void Swap(Beacon* other);

  // implements Message ----------------------------------------------

  Beacon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Beacon& from);
  void MergeFrom(const Beacon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required float snr = 3;
  inline bool has_snr() const;
  inline void clear_snr();
  static const int kSnrFieldNumber = 3;
  inline float snr() const;
  inline void set_snr(float value);

  // required .Code code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::Code& code() const;
  inline ::Code* mutable_code();
  inline ::Code* release_code();
  inline void set_allocated_code(::Code* code);

  // required bool enabled = 5;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 5;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float x = 7;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 7;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 8;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 8;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 9;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 9;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Beacon)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_snr();
  inline void clear_has_snr();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::google::protobuf::uint32 id_;
  float snr_;
  ::Code* code_;
  ::std::string* name_;
  bool enabled_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Beacon* default_instance_;
};
// -------------------------------------------------------------------

class Environement : public ::google::protobuf::Message {
 public:
  Environement();
  virtual ~Environement();

  Environement(const Environement& from);

  inline Environement& operator=(const Environement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Environement& default_instance();

  void Swap(Environement* other);

  // implements Message ----------------------------------------------

  Environement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Environement& from);
  void MergeFrom(const Environement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional float longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float altitude = 5;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  inline float altitude() const;
  inline void set_altitude(float value);

  // repeated .Beacon beacons = 6;
  inline int beacons_size() const;
  inline void clear_beacons();
  static const int kBeaconsFieldNumber = 6;
  inline const ::Beacon& beacons(int index) const;
  inline ::Beacon* mutable_beacons(int index);
  inline ::Beacon* add_beacons();
  inline const ::google::protobuf::RepeatedPtrField< ::Beacon >&
      beacons() const;
  inline ::google::protobuf::RepeatedPtrField< ::Beacon >*
      mutable_beacons();

  // optional float width = 7;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 7;
  inline float width() const;
  inline void set_width(float value);

  // optional float length = 8;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 8;
  inline float length() const;
  inline void set_length(float value);

  // optional float height = 9;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline float height() const;
  inline void set_height(float value);

  // @@protoc_insertion_point(class_scope:Environement)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float latitude_;
  float longitude_;
  ::google::protobuf::RepeatedPtrField< ::Beacon > beacons_;
  float altitude_;
  float width_;
  float length_;
  float height_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Environement* default_instance_;
};
// ===================================================================


// ===================================================================

// Code

// required .Code.Type type = 1;
inline bool Code::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Code::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Code::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Code::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Code_Type Code::type() const {
  // @@protoc_insertion_point(field_get:Code.type)
  return static_cast< ::Code_Type >(type_);
}
inline void Code::set_type(::Code_Type value) {
  assert(::Code_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Code.type)
}

// required uint32 order = 2;
inline bool Code::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Code::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Code::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Code::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 Code::order() const {
  // @@protoc_insertion_point(field_get:Code.order)
  return order_;
}
inline void Code::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:Code.order)
}

// repeated float data = 3;
inline int Code::data_size() const {
  return data_.size();
}
inline void Code::clear_data() {
  data_.Clear();
}
inline float Code::data(int index) const {
  // @@protoc_insertion_point(field_get:Code.data)
  return data_.Get(index);
}
inline void Code::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Code.data)
}
inline void Code::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:Code.data)
}
inline const ::google::protobuf::RepeatedField< float >&
Code::data() const {
  // @@protoc_insertion_point(field_list:Code.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
Code::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Code.data)
  return &data_;
}

// -------------------------------------------------------------------

// Beacon

// required uint32 id = 1;
inline bool Beacon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Beacon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Beacon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Beacon::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Beacon::id() const {
  // @@protoc_insertion_point(field_get:Beacon.id)
  return id_;
}
inline void Beacon::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Beacon.id)
}

// required string uuid = 2;
inline bool Beacon::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Beacon::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Beacon::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Beacon::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Beacon::uuid() const {
  // @@protoc_insertion_point(field_get:Beacon.uuid)
  return *uuid_;
}
inline void Beacon::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:Beacon.uuid)
}
inline void Beacon::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Beacon.uuid)
}
inline void Beacon::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Beacon.uuid)
}
inline ::std::string* Beacon::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Beacon.uuid)
  return uuid_;
}
inline ::std::string* Beacon::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Beacon::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Beacon.uuid)
}

// required float snr = 3;
inline bool Beacon::has_snr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Beacon::set_has_snr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Beacon::clear_has_snr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Beacon::clear_snr() {
  snr_ = 0;
  clear_has_snr();
}
inline float Beacon::snr() const {
  // @@protoc_insertion_point(field_get:Beacon.snr)
  return snr_;
}
inline void Beacon::set_snr(float value) {
  set_has_snr();
  snr_ = value;
  // @@protoc_insertion_point(field_set:Beacon.snr)
}

// required .Code code = 4;
inline bool Beacon::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Beacon::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Beacon::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Beacon::clear_code() {
  if (code_ != NULL) code_->::Code::Clear();
  clear_has_code();
}
inline const ::Code& Beacon::code() const {
  // @@protoc_insertion_point(field_get:Beacon.code)
  return code_ != NULL ? *code_ : *default_instance_->code_;
}
inline ::Code* Beacon::mutable_code() {
  set_has_code();
  if (code_ == NULL) code_ = new ::Code;
  // @@protoc_insertion_point(field_mutable:Beacon.code)
  return code_;
}
inline ::Code* Beacon::release_code() {
  clear_has_code();
  ::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline void Beacon::set_allocated_code(::Code* code) {
  delete code_;
  code_ = code;
  if (code) {
    set_has_code();
  } else {
    clear_has_code();
  }
  // @@protoc_insertion_point(field_set_allocated:Beacon.code)
}

// required bool enabled = 5;
inline bool Beacon::has_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Beacon::set_has_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Beacon::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Beacon::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool Beacon::enabled() const {
  // @@protoc_insertion_point(field_get:Beacon.enabled)
  return enabled_;
}
inline void Beacon::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Beacon.enabled)
}

// optional string name = 6;
inline bool Beacon::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Beacon::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Beacon::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Beacon::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Beacon::name() const {
  // @@protoc_insertion_point(field_get:Beacon.name)
  return *name_;
}
inline void Beacon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Beacon.name)
}
inline void Beacon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Beacon.name)
}
inline void Beacon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Beacon.name)
}
inline ::std::string* Beacon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Beacon.name)
  return name_;
}
inline ::std::string* Beacon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Beacon::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Beacon.name)
}

// required float x = 7;
inline bool Beacon::has_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Beacon::set_has_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Beacon::clear_has_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Beacon::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Beacon::x() const {
  // @@protoc_insertion_point(field_get:Beacon.x)
  return x_;
}
inline void Beacon::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Beacon.x)
}

// required float y = 8;
inline bool Beacon::has_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Beacon::set_has_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Beacon::clear_has_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Beacon::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Beacon::y() const {
  // @@protoc_insertion_point(field_get:Beacon.y)
  return y_;
}
inline void Beacon::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Beacon.y)
}

// required float z = 9;
inline bool Beacon::has_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Beacon::set_has_z() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Beacon::clear_has_z() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Beacon::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Beacon::z() const {
  // @@protoc_insertion_point(field_get:Beacon.z)
  return z_;
}
inline void Beacon::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Beacon.z)
}

// -------------------------------------------------------------------

// Environement

// optional string name = 2;
inline bool Environement::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Environement::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Environement::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Environement::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Environement::name() const {
  // @@protoc_insertion_point(field_get:Environement.name)
  return *name_;
}
inline void Environement::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Environement.name)
}
inline void Environement::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Environement.name)
}
inline void Environement::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Environement.name)
}
inline ::std::string* Environement::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Environement.name)
  return name_;
}
inline ::std::string* Environement::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Environement::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Environement.name)
}

// optional float latitude = 3;
inline bool Environement::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Environement::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Environement::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Environement::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float Environement::latitude() const {
  // @@protoc_insertion_point(field_get:Environement.latitude)
  return latitude_;
}
inline void Environement::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:Environement.latitude)
}

// optional float longitude = 4;
inline bool Environement::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Environement::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Environement::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Environement::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float Environement::longitude() const {
  // @@protoc_insertion_point(field_get:Environement.longitude)
  return longitude_;
}
inline void Environement::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:Environement.longitude)
}

// optional float altitude = 5;
inline bool Environement::has_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Environement::set_has_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Environement::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Environement::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline float Environement::altitude() const {
  // @@protoc_insertion_point(field_get:Environement.altitude)
  return altitude_;
}
inline void Environement::set_altitude(float value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:Environement.altitude)
}

// repeated .Beacon beacons = 6;
inline int Environement::beacons_size() const {
  return beacons_.size();
}
inline void Environement::clear_beacons() {
  beacons_.Clear();
}
inline const ::Beacon& Environement::beacons(int index) const {
  // @@protoc_insertion_point(field_get:Environement.beacons)
  return beacons_.Get(index);
}
inline ::Beacon* Environement::mutable_beacons(int index) {
  // @@protoc_insertion_point(field_mutable:Environement.beacons)
  return beacons_.Mutable(index);
}
inline ::Beacon* Environement::add_beacons() {
  // @@protoc_insertion_point(field_add:Environement.beacons)
  return beacons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Beacon >&
Environement::beacons() const {
  // @@protoc_insertion_point(field_list:Environement.beacons)
  return beacons_;
}
inline ::google::protobuf::RepeatedPtrField< ::Beacon >*
Environement::mutable_beacons() {
  // @@protoc_insertion_point(field_mutable_list:Environement.beacons)
  return &beacons_;
}

// optional float width = 7;
inline bool Environement::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Environement::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Environement::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Environement::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Environement::width() const {
  // @@protoc_insertion_point(field_get:Environement.width)
  return width_;
}
inline void Environement::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Environement.width)
}

// optional float length = 8;
inline bool Environement::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Environement::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Environement::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Environement::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float Environement::length() const {
  // @@protoc_insertion_point(field_get:Environement.length)
  return length_;
}
inline void Environement::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:Environement.length)
}

// optional float height = 9;
inline bool Environement::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Environement::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Environement::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Environement::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Environement::height() const {
  // @@protoc_insertion_point(field_get:Environement.height)
  return height_;
}
inline void Environement::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Environement.height)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Code_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Code_Type>() {
  return ::Code_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
