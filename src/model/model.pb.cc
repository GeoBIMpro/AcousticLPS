// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Code> {
} _Code_default_instance_;
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class BeaconDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Beacon> {
} _Beacon_default_instance_;
class EnvironementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Environement> {
} _Environement_default_instance_;

namespace protobuf_model_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, data_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, snr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beacon, name_),
  4,
  0,
  5,
  2,
  3,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, longitud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, beacons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environement, height_),
  3,
  0,
  1,
  2,
  ~0u,
  4,
  5,
  6,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Code)},
  { 10, 17, sizeof(Point)},
  { 20, 31, sizeof(Beacon)},
  { 38, 50, sizeof(Environement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Code_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Beacon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Environement_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "model.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Code_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Beacon_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Environement_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Code_default_instance_.DefaultConstruct();
  _Point_default_instance_.DefaultConstruct();
  _Beacon_default_instance_.DefaultConstruct();
  _Environement_default_instance_.DefaultConstruct();
  _Beacon_default_instance_.get_mutable()->point_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  _Beacon_default_instance_.get_mutable()->code_ = const_cast< ::Code*>(
      ::Code::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013model.proto\"i\n\004Code\022\030\n\004type\030\001 \002(\0162\n.Co"
      "de.Type\022\r\n\005order\030\002 \002(\r\022\014\n\004data\030\003 \003(\002\"*\n\004"
      "Type\022\010\n\004Gold\020\000\022\n\n\006Kasami\020\001\022\014\n\010Hadamard\020\002"
      "\"(\n\005Point\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002"
      "(\002\"z\n\006Beacon\022\n\n\002id\030\001 \002(\r\022\014\n\004uuid\030\002 \002(\t\022\013"
      "\n\003snr\030\003 \002(\002\022\025\n\005point\030\004 \002(\0132\006.Point\022\023\n\004co"
      "de\030\005 \002(\0132\005.Code\022\017\n\007enabled\030\006 \002(\010\022\014\n\004name"
      "\030\007 \001(\t\"\225\001\n\014Environement\022\n\n\002id\030\001 \002(\r\022\014\n\004n"
      "ame\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\t\022\020\n\010longitud\030"
      "\004 \002(\t\022\030\n\007beacons\030\005 \003(\0132\007.Beacon\022\r\n\005width"
      "\030\006 \002(\002\022\016\n\006length\030\007 \002(\002\022\016\n\006height\030\010 \002(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 438);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_model_2eproto

const ::google::protobuf::EnumDescriptor* Code_Type_descriptor() {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_enum_descriptors[0];
}
bool Code_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Code_Type Code::Gold;
const Code_Type Code::Kasami;
const Code_Type Code::Hadamard;
const Code_Type Code::Type_MIN;
const Code_Type Code::Type_MAX;
const int Code::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Code::kTypeFieldNumber;
const int Code::kOrderFieldNumber;
const int Code::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Code::Code()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_model_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Code)
}
Code::Code(const Code& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&type_) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:Code)
}

void Code::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&type_) + sizeof(order_));
}

Code::~Code() {
  // @@protoc_insertion_point(destructor:Code)
  SharedDtor();
}

void Code::SharedDtor() {
}

void Code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Code::descriptor() {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[0].descriptor;
}

const Code& Code::default_instance() {
  protobuf_model_2eproto::InitDefaults();
  return *internal_default_instance();
}

Code* Code::New(::google::protobuf::Arena* arena) const {
  Code* n = new Code;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Code::Clear() {
// @@protoc_insertion_point(message_clear_start:Code)
  data_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&type_) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Code)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Code.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Code_Type_IsValid(value)) {
            set_type(static_cast< ::Code_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order = 2;
      case 2: {
        if (tag == 16u) {
          set_has_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 3;
      case 3: {
        if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_data())));
        } else if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Code)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Code)
  return false;
#undef DO_
}

void Code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Code)
  // required .Code.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order(), output);
  }

  // repeated float data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Code)
}

::google::protobuf::uint8* Code::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Code)
  // required .Code.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order(), target);
  }

  // repeated float data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Code)
  return target;
}

size_t Code::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Code)
  size_t total_size = 0;

  if (has_type()) {
    // required .Code.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_order()) {
    // required uint32 order = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order());
  }

  return total_size;
}
size_t Code::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Code)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Code.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 order = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float data = 3;
  {
    unsigned int count = this->data_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Code::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Code)
  GOOGLE_DCHECK_NE(&from, this);
  const Code* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Code>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Code)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Code)
    MergeFrom(*source);
  }
}

void Code::MergeFrom(const Code& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Code)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
}

void Code::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Code::CopyFrom(const Code& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Code::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Code::Swap(Code* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Code::InternalSwap(Code* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(type_, other->type_);
  std::swap(order_, other->order_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Code::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Code

// required .Code.Type type = 1;
bool Code::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Code::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Code::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Code::clear_type() {
  type_ = 0;
  clear_has_type();
}
::Code_Type Code::type() const {
  // @@protoc_insertion_point(field_get:Code.type)
  return static_cast< ::Code_Type >(type_);
}
void Code::set_type(::Code_Type value) {
  assert(::Code_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Code.type)
}

// required uint32 order = 2;
bool Code::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Code::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
void Code::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
void Code::clear_order() {
  order_ = 0u;
  clear_has_order();
}
::google::protobuf::uint32 Code::order() const {
  // @@protoc_insertion_point(field_get:Code.order)
  return order_;
}
void Code::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:Code.order)
}

// repeated float data = 3;
int Code::data_size() const {
  return data_.size();
}
void Code::clear_data() {
  data_.Clear();
}
float Code::data(int index) const {
  // @@protoc_insertion_point(field_get:Code.data)
  return data_.Get(index);
}
void Code::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Code.data)
}
void Code::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:Code.data)
}
const ::google::protobuf::RepeatedField< float >&
Code::data() const {
  // @@protoc_insertion_point(field_list:Code.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
Code::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Code.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_model_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[1].descriptor;
}

const Point& Point::default_instance() {
  protobuf_model_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Point)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Point)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// required float x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Point::x() const {
  // @@protoc_insertion_point(field_get:Point.x)
  return x_;
}
void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Point.x)
}

// required float y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Point::y() const {
  // @@protoc_insertion_point(field_get:Point.y)
  return y_;
}
void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Point.y)
}

// required float z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Point::z() const {
  // @@protoc_insertion_point(field_get:Point.z)
  return z_;
}
void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Beacon::kIdFieldNumber;
const int Beacon::kUuidFieldNumber;
const int Beacon::kSnrFieldNumber;
const int Beacon::kPointFieldNumber;
const int Beacon::kCodeFieldNumber;
const int Beacon::kEnabledFieldNumber;
const int Beacon::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Beacon::Beacon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_model_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beacon)
}
Beacon::Beacon(const Beacon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_point()) {
    point_ = new ::Point(*from.point_);
  } else {
    point_ = NULL;
  }
  if (from.has_code()) {
    code_ = new ::Code(*from.code_);
  } else {
    code_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&id_) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:Beacon)
}

void Beacon::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&point_, 0, reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&point_) + sizeof(enabled_));
}

Beacon::~Beacon() {
  // @@protoc_insertion_point(destructor:Beacon)
  SharedDtor();
}

void Beacon::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete point_;
  }
  if (this != internal_default_instance()) {
    delete code_;
  }
}

void Beacon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Beacon::descriptor() {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[2].descriptor;
}

const Beacon& Beacon::default_instance() {
  protobuf_model_2eproto::InitDefaults();
  return *internal_default_instance();
}

Beacon* Beacon::New(::google::protobuf::Arena* arena) const {
  Beacon* n = new Beacon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Beacon::Clear() {
// @@protoc_insertion_point(message_clear_start:Beacon)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_point()) {
      GOOGLE_DCHECK(point_ != NULL);
      point_->::Point::Clear();
    }
    if (has_code()) {
      GOOGLE_DCHECK(code_ != NULL);
      code_->::Code::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&id_) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Beacon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beacon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string uuid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Beacon.uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float snr = 3;
      case 3: {
        if (tag == 29u) {
          set_has_snr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Point point = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Code code = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool enabled = 6;
      case 6: {
        if (tag == 48u) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Beacon.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beacon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beacon)
  return false;
#undef DO_
}

void Beacon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beacon)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Beacon.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // required float snr = 3;
  if (has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->snr(), output);
  }

  // required .Point point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->point_, output);
  }

  // required .Code code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->code_, output);
  }

  // required bool enabled = 6;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enabled(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Beacon.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beacon)
}

::google::protobuf::uint8* Beacon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Beacon)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Beacon.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // required float snr = 3;
  if (has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->snr(), target);
  }

  // required .Point point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->point_, false, target);
  }

  // required .Code code = 5;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->code_, false, target);
  }

  // required bool enabled = 6;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enabled(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Beacon.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beacon)
  return target;
}

size_t Beacon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Beacon)
  size_t total_size = 0;

  if (has_uuid()) {
    // required string uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  if (has_point()) {
    // required .Point point = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  if (has_code()) {
    // required .Code code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->code_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_snr()) {
    // required float snr = 3;
    total_size += 1 + 4;
  }

  if (has_enabled()) {
    // required bool enabled = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Beacon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Beacon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007d) ^ 0x0000007d) == 0) {  // All required fields are present.
    // required string uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

    // required .Point point = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);

    // required .Code code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->code_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required float snr = 3;
    total_size += 1 + 4;

    // required bool enabled = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string name = 7;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Beacon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Beacon)
  GOOGLE_DCHECK_NE(&from, this);
  const Beacon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Beacon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Beacon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Beacon)
    MergeFrom(*source);
  }
}

void Beacon::MergeFrom(const Beacon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Beacon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_point()) {
      mutable_point()->::Point::MergeFrom(from.point());
    }
    if (from.has_code()) {
      mutable_code()->::Code::MergeFrom(from.code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_snr()) {
      set_snr(from.snr());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
}

void Beacon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Beacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Beacon::CopyFrom(const Beacon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Beacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Beacon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;
  if (has_point()) {
    if (!this->point_->IsInitialized()) return false;
  }
  if (has_code()) {
    if (!this->code_->IsInitialized()) return false;
  }
  return true;
}

void Beacon::Swap(Beacon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Beacon::InternalSwap(Beacon* other) {
  uuid_.Swap(&other->uuid_);
  name_.Swap(&other->name_);
  std::swap(point_, other->point_);
  std::swap(code_, other->code_);
  std::swap(id_, other->id_);
  std::swap(snr_, other->snr_);
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Beacon::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Beacon

// required uint32 id = 1;
bool Beacon::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Beacon::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Beacon::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Beacon::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Beacon::id() const {
  // @@protoc_insertion_point(field_get:Beacon.id)
  return id_;
}
void Beacon::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Beacon.id)
}

// required string uuid = 2;
bool Beacon::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Beacon::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void Beacon::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Beacon::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& Beacon::uuid() const {
  // @@protoc_insertion_point(field_get:Beacon.uuid)
  return uuid_.GetNoArena();
}
void Beacon::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Beacon.uuid)
}
#if LANG_CXX11
void Beacon::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Beacon.uuid)
}
#endif
void Beacon::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Beacon.uuid)
}
void Beacon::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Beacon.uuid)
}
::std::string* Beacon::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:Beacon.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Beacon::release_uuid() {
  // @@protoc_insertion_point(field_release:Beacon.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Beacon::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Beacon.uuid)
}

// required float snr = 3;
bool Beacon::has_snr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Beacon::set_has_snr() {
  _has_bits_[0] |= 0x00000020u;
}
void Beacon::clear_has_snr() {
  _has_bits_[0] &= ~0x00000020u;
}
void Beacon::clear_snr() {
  snr_ = 0;
  clear_has_snr();
}
float Beacon::snr() const {
  // @@protoc_insertion_point(field_get:Beacon.snr)
  return snr_;
}
void Beacon::set_snr(float value) {
  set_has_snr();
  snr_ = value;
  // @@protoc_insertion_point(field_set:Beacon.snr)
}

// required .Point point = 4;
bool Beacon::has_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Beacon::set_has_point() {
  _has_bits_[0] |= 0x00000004u;
}
void Beacon::clear_has_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void Beacon::clear_point() {
  if (point_ != NULL) point_->::Point::Clear();
  clear_has_point();
}
const ::Point& Beacon::point() const {
  // @@protoc_insertion_point(field_get:Beacon.point)
  return point_ != NULL ? *point_
                         : *::Point::internal_default_instance();
}
::Point* Beacon::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::Point;
  }
  // @@protoc_insertion_point(field_mutable:Beacon.point)
  return point_;
}
::Point* Beacon::release_point() {
  // @@protoc_insertion_point(field_release:Beacon.point)
  clear_has_point();
  ::Point* temp = point_;
  point_ = NULL;
  return temp;
}
void Beacon::set_allocated_point(::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:Beacon.point)
}

// required .Code code = 5;
bool Beacon::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Beacon::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
void Beacon::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void Beacon::clear_code() {
  if (code_ != NULL) code_->::Code::Clear();
  clear_has_code();
}
const ::Code& Beacon::code() const {
  // @@protoc_insertion_point(field_get:Beacon.code)
  return code_ != NULL ? *code_
                         : *::Code::internal_default_instance();
}
::Code* Beacon::mutable_code() {
  set_has_code();
  if (code_ == NULL) {
    code_ = new ::Code;
  }
  // @@protoc_insertion_point(field_mutable:Beacon.code)
  return code_;
}
::Code* Beacon::release_code() {
  // @@protoc_insertion_point(field_release:Beacon.code)
  clear_has_code();
  ::Code* temp = code_;
  code_ = NULL;
  return temp;
}
void Beacon::set_allocated_code(::Code* code) {
  delete code_;
  code_ = code;
  if (code) {
    set_has_code();
  } else {
    clear_has_code();
  }
  // @@protoc_insertion_point(field_set_allocated:Beacon.code)
}

// required bool enabled = 6;
bool Beacon::has_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Beacon::set_has_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
void Beacon::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
void Beacon::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool Beacon::enabled() const {
  // @@protoc_insertion_point(field_get:Beacon.enabled)
  return enabled_;
}
void Beacon::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Beacon.enabled)
}

// optional string name = 7;
bool Beacon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Beacon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Beacon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Beacon::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Beacon::name() const {
  // @@protoc_insertion_point(field_get:Beacon.name)
  return name_.GetNoArena();
}
void Beacon::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Beacon.name)
}
#if LANG_CXX11
void Beacon::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Beacon.name)
}
#endif
void Beacon::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Beacon.name)
}
void Beacon::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Beacon.name)
}
::std::string* Beacon::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Beacon.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Beacon::release_name() {
  // @@protoc_insertion_point(field_release:Beacon.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Beacon::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Beacon.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environement::kIdFieldNumber;
const int Environement::kNameFieldNumber;
const int Environement::kLatitudeFieldNumber;
const int Environement::kLongitudFieldNumber;
const int Environement::kBeaconsFieldNumber;
const int Environement::kWidthFieldNumber;
const int Environement::kLengthFieldNumber;
const int Environement::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environement::Environement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_model_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Environement)
}
Environement::Environement(const Environement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      beacons_(from.beacons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  latitude_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_latitude()) {
    latitude_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latitude_);
  }
  longitud_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_longitud()) {
    longitud_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.longitud_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&id_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Environement)
}

void Environement::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitud_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&id_) + sizeof(height_));
}

Environement::~Environement() {
  // @@protoc_insertion_point(destructor:Environement)
  SharedDtor();
}

void Environement::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitud_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Environement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Environement::descriptor() {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[3].descriptor;
}

const Environement& Environement::default_instance() {
  protobuf_model_2eproto::InitDefaults();
  return *internal_default_instance();
}

Environement* Environement::New(::google::protobuf::Arena* arena) const {
  Environement* n = new Environement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Environement::Clear() {
// @@protoc_insertion_point(message_clear_start:Environement)
  beacons_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_latitude()) {
      GOOGLE_DCHECK(!latitude_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*latitude_.UnsafeRawStringPointer())->clear();
    }
    if (has_longitud()) {
      GOOGLE_DCHECK(!longitud_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*longitud_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&id_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Environement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Environement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Environement.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string latitude = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Environement.latitude");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string longitud = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitud()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->longitud().data(), this->longitud().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Environement.longitud");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Beacon beacons = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_beacons()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required float width = 6;
      case 6: {
        if (tag == 53u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float length = 7;
      case 7: {
        if (tag == 61u) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float height = 8;
      case 8: {
        if (tag == 69u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Environement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Environement)
  return false;
#undef DO_
}

void Environement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Environement)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Environement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Environement.latitude");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->latitude(), output);
  }

  // required string longitud = 4;
  if (has_longitud()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitud().data(), this->longitud().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Environement.longitud");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->longitud(), output);
  }

  // repeated .Beacon beacons = 5;
  for (unsigned int i = 0, n = this->beacons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->beacons(i), output);
  }

  // required float width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->width(), output);
  }

  // required float length = 7;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->length(), output);
  }

  // required float height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Environement)
}

::google::protobuf::uint8* Environement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Environement)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Environement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Environement.latitude");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->latitude(), target);
  }

  // required string longitud = 4;
  if (has_longitud()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitud().data(), this->longitud().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Environement.longitud");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->longitud(), target);
  }

  // repeated .Beacon beacons = 5;
  for (unsigned int i = 0, n = this->beacons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->beacons(i), false, target);
  }

  // required float width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->width(), target);
  }

  // required float length = 7;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->length(), target);
  }

  // required float height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Environement)
  return target;
}

size_t Environement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Environement)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_latitude()) {
    // required string latitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latitude());
  }

  if (has_longitud()) {
    // required string longitud = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->longitud());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_width()) {
    // required float width = 6;
    total_size += 1 + 4;
  }

  if (has_length()) {
    // required float length = 7;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 8;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Environement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Environement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string latitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latitude());

    // required string longitud = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->longitud());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required float width = 6;
    total_size += 1 + 4;

    // required float length = 7;
    total_size += 1 + 4;

    // required float height = 8;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Beacon beacons = 5;
  {
    unsigned int count = this->beacons_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beacons(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Environement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Environement)
  GOOGLE_DCHECK_NE(&from, this);
  const Environement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Environement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Environement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Environement)
    MergeFrom(*source);
  }
}

void Environement::MergeFrom(const Environement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Environement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  beacons_.MergeFrom(from.beacons_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_latitude()) {
      set_has_latitude();
      latitude_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latitude_);
    }
    if (from.has_longitud()) {
      set_has_longitud();
      longitud_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.longitud_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
}

void Environement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Environement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environement::CopyFrom(const Environement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Environement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->beacons())) return false;
  return true;
}

void Environement::Swap(Environement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environement::InternalSwap(Environement* other) {
  beacons_.UnsafeArenaSwap(&other->beacons_);
  name_.Swap(&other->name_);
  latitude_.Swap(&other->latitude_);
  longitud_.Swap(&other->longitud_);
  std::swap(id_, other->id_);
  std::swap(width_, other->width_);
  std::swap(length_, other->length_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Environement::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_model_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Environement

// required uint32 id = 1;
bool Environement::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Environement::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Environement::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Environement::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Environement::id() const {
  // @@protoc_insertion_point(field_get:Environement.id)
  return id_;
}
void Environement::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Environement.id)
}

// required string name = 2;
bool Environement::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Environement::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Environement::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Environement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Environement::name() const {
  // @@protoc_insertion_point(field_get:Environement.name)
  return name_.GetNoArena();
}
void Environement::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Environement.name)
}
#if LANG_CXX11
void Environement::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Environement.name)
}
#endif
void Environement::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Environement.name)
}
void Environement::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Environement.name)
}
::std::string* Environement::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Environement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Environement::release_name() {
  // @@protoc_insertion_point(field_release:Environement.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Environement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Environement.name)
}

// required string latitude = 3;
bool Environement::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Environement::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void Environement::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void Environement::clear_latitude() {
  latitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latitude();
}
const ::std::string& Environement::latitude() const {
  // @@protoc_insertion_point(field_get:Environement.latitude)
  return latitude_.GetNoArena();
}
void Environement::set_latitude(const ::std::string& value) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Environement.latitude)
}
#if LANG_CXX11
void Environement::set_latitude(::std::string&& value) {
  set_has_latitude();
  latitude_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Environement.latitude)
}
#endif
void Environement::set_latitude(const char* value) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Environement.latitude)
}
void Environement::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Environement.latitude)
}
::std::string* Environement::mutable_latitude() {
  set_has_latitude();
  // @@protoc_insertion_point(field_mutable:Environement.latitude)
  return latitude_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Environement::release_latitude() {
  // @@protoc_insertion_point(field_release:Environement.latitude)
  clear_has_latitude();
  return latitude_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Environement::set_allocated_latitude(::std::string* latitude) {
  if (latitude != NULL) {
    set_has_latitude();
  } else {
    clear_has_latitude();
  }
  latitude_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latitude);
  // @@protoc_insertion_point(field_set_allocated:Environement.latitude)
}

// required string longitud = 4;
bool Environement::has_longitud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Environement::set_has_longitud() {
  _has_bits_[0] |= 0x00000004u;
}
void Environement::clear_has_longitud() {
  _has_bits_[0] &= ~0x00000004u;
}
void Environement::clear_longitud() {
  longitud_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_longitud();
}
const ::std::string& Environement::longitud() const {
  // @@protoc_insertion_point(field_get:Environement.longitud)
  return longitud_.GetNoArena();
}
void Environement::set_longitud(const ::std::string& value) {
  set_has_longitud();
  longitud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Environement.longitud)
}
#if LANG_CXX11
void Environement::set_longitud(::std::string&& value) {
  set_has_longitud();
  longitud_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Environement.longitud)
}
#endif
void Environement::set_longitud(const char* value) {
  set_has_longitud();
  longitud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Environement.longitud)
}
void Environement::set_longitud(const char* value, size_t size) {
  set_has_longitud();
  longitud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Environement.longitud)
}
::std::string* Environement::mutable_longitud() {
  set_has_longitud();
  // @@protoc_insertion_point(field_mutable:Environement.longitud)
  return longitud_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Environement::release_longitud() {
  // @@protoc_insertion_point(field_release:Environement.longitud)
  clear_has_longitud();
  return longitud_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Environement::set_allocated_longitud(::std::string* longitud) {
  if (longitud != NULL) {
    set_has_longitud();
  } else {
    clear_has_longitud();
  }
  longitud_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longitud);
  // @@protoc_insertion_point(field_set_allocated:Environement.longitud)
}

// repeated .Beacon beacons = 5;
int Environement::beacons_size() const {
  return beacons_.size();
}
void Environement::clear_beacons() {
  beacons_.Clear();
}
const ::Beacon& Environement::beacons(int index) const {
  // @@protoc_insertion_point(field_get:Environement.beacons)
  return beacons_.Get(index);
}
::Beacon* Environement::mutable_beacons(int index) {
  // @@protoc_insertion_point(field_mutable:Environement.beacons)
  return beacons_.Mutable(index);
}
::Beacon* Environement::add_beacons() {
  // @@protoc_insertion_point(field_add:Environement.beacons)
  return beacons_.Add();
}
::google::protobuf::RepeatedPtrField< ::Beacon >*
Environement::mutable_beacons() {
  // @@protoc_insertion_point(field_mutable_list:Environement.beacons)
  return &beacons_;
}
const ::google::protobuf::RepeatedPtrField< ::Beacon >&
Environement::beacons() const {
  // @@protoc_insertion_point(field_list:Environement.beacons)
  return beacons_;
}

// required float width = 6;
bool Environement::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Environement::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void Environement::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void Environement::clear_width() {
  width_ = 0;
  clear_has_width();
}
float Environement::width() const {
  // @@protoc_insertion_point(field_get:Environement.width)
  return width_;
}
void Environement::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Environement.width)
}

// required float length = 7;
bool Environement::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Environement::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
void Environement::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void Environement::clear_length() {
  length_ = 0;
  clear_has_length();
}
float Environement::length() const {
  // @@protoc_insertion_point(field_get:Environement.length)
  return length_;
}
void Environement::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:Environement.length)
}

// required float height = 8;
bool Environement::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Environement::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
void Environement::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void Environement::clear_height() {
  height_ = 0;
  clear_has_height();
}
float Environement::height() const {
  // @@protoc_insertion_point(field_get:Environement.height)
  return height_;
}
void Environement::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Environement.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
